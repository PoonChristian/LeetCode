// LeetCode 12: Integer to Roman
// https://leetcode.com/problems/integer-to-roman/

// Time Complexity: O(n) where n is the number of roman numeral characters generated by the repeat() function
// Space Complexity: O(1) because space doesn't grow as input grows. The roman numerals array will always be the same size
public class IntegerToRoman {
    // Put all the possible roman numerals in an array from largest to smallest
    private RomanNumeral[] romanNumerals = {
        new RomanNumeral("M", 1000),
        new RomanNumeral("CM", 900),
        new RomanNumeral("D", 500),
        new RomanNumeral("CD", 400),
        new RomanNumeral("C", 100),
        new RomanNumeral("XC", 90),
        new RomanNumeral("L", 50),
        new RomanNumeral("XL", 40),
        new RomanNumeral("X", 10),
        new RomanNumeral("IX", 9),
        new RomanNumeral("V", 5),
        new RomanNumeral("IV", 4),
        new RomanNumeral("I", 1)
    };
    
    public String intToRoman(int num) {
        // Initialize a StringBuilder to store the roman numeral result
        StringBuilder roman = new StringBuilder();
        
        // Iterate over all roman numerals
        for (RomanNumeral romanNumeral : romanNumerals) {
            // To get the most significant digit, take num and divide it by the roman numeral's value
            int numSymbols = num / romanNumeral.value;
            
            // We only want to append the roman numeral symbol if num is greater than the current roman value
            // If the roman value is greater than the number, numSymbols will be 0, so we don't want to append any symbols
            if (numSymbols != 0) {
                // Otherwise we want to append the symbol, repeated numSymbols times
                roman.append(romanNumeral.symbol.repeat(numSymbols));
            }
            
            // Remove the most significant digit to evaluate the next significant digit against the next roman numeral value
            // To remove the most significant digit, take the number and MOD it by the roman numeral's value
            num %= romanNumeral.value;
        }
        
        // Return the roman numeral string
        return roman.toString();
    }
    
    class RomanNumeral {
        String symbol;
        int value;
        
        public RomanNumeral(String symbol, int value) {
            this.symbol = symbol;
            this.value = value;
        }
    }
}
